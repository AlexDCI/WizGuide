Проект Wizguide: Задание на 2-й день: Создание приложения и настройка REST API
1. Создайте приложение translator:
    * Внутри проекта translator_helper создайте приложение translator:bashКопировать кодpython manage.py startapp translator
    * 
2. Подключение приложения:
    * Добавьте translator и rest_framework в список INSTALLED_APPS в settings.py.
3. Настройка базового API:
    * Создайте простейший API-эндпоинт для теста, используя Django REST Framework.
    * В translator/views.py добавьте тестовый API-контроллер, например, который возвращает сообщение {"message": "API is working"}.
4. Настройка маршрутов:
    * В translator/urls.py добавьте URL-маршрут для тестового API.
    * Подключите translator/urls.py к urls.py вашего основного проекта.
5. Проверка работы API:
    * Перезапустите сервер и проверьте, что по новому маршруту вы видите JSON-ответ.

Задание на 3-й день: Разработка модели для хранения переведенного текста
1. Создайте базовую модель для перевода:
    * В translator/models.py создайте модель Translation, которая будет хранить текст, язык исходного текста и переведенный текст.
2. Настройка миграций:
    * Выполните миграции, чтобы создать таблицы в базе данных:bashКопировать кодpython manage.py makemigrations
    * python manage.py migrate
    * 
3. Создание сериализатора:
    * В translator/serializers.py создайте сериализатор TranslationSerializer, который будет преобразовывать данные модели Translation в JSON-формат для API.
4. Добавьте эндпоинт для сохранения переводов:
    * В translator/views.py добавьте контроллер, чтобы принимать и сохранять переводы через POST-запросы.

Проверка выполнения задания
По завершении этих 3 дней у вас должно быть:
* Рабочее виртуальное окружение и установленный Django.
* Базовый Django проект translator_helper и приложение translator.
* Настроенный API с простым эндпоинтом.
* Базовая модель для хранения переводов, сериализатор и эндпоинт для сохранения переводов.

